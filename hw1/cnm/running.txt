 kittycat  …  homework  hw1  cnm  python -i cannibal_missionary_search_3.py 
>>> myboat = CannibalMissionary((3, 3, 1))
>>> out = uniform_cost_search(myboat, display=True)
14 paths have been expanded and 0 paths remain in the frontier
>>> print(out.path())
[<Node (3, 3, 1)>, <Node (1, 3, 0)>, <Node (2, 3, 1)>, <Node (0, 3, 0)>, <Node (1, 3, 1)>, <Node (1, 1, 0)>, <Node (2, 2, 1)>, <Node (2, 0, 0)>, <Node (3, 0, 1)>, <Node (1, 0, 0)>, <Node (1
, 1, 1)>, <Node (0, 0, 0)>]
>>> ids = iterative_deepening_search(myboat)
>>> print(ids.path())
[<Node (3, 3, 1)>, <Node (1, 3, 0)>, <Node (2, 3, 1)>, <Node (0, 3, 0)>, <Node (1, 3, 1)>, <Node (1, 1, 0)>, <Node (2, 2, 1)>, <Node (2, 0, 0)>, <Node (3, 0, 1)>, <Node (1, 0, 0)>, <Node (1, 1, 1)>, <Node (0, 0, 0)>]
>>> gbfs = greedy_best_first_graph_search(myboat, node.depth, display=True)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'node' is not defined
>>> gbfs = greedy_best_first_graph_search(myboat, lambda node: node.depth, display=True)
14 paths have been expanded and 0 paths remain in the frontier
>>> print(gbfs.solution())
[(-2, 0, -1), (1, 0, 1), (-2, 0, -1), (1, 0, 1), (0, -2, -1), (1, 1, 1), (0, -2, -1), (1, 0, 1), (-2, 0, -1), (0, 1, 1), (-1, -1, -1)]
>>> astar = astar_search(myboat, lambda node: node.depth, display=True)
14 paths have been expanded and 0 paths remain in the frontier
>>> print(astar.solution())
[(-2, 0, -1), (1, 0, 1), (-2, 0, -1), (1, 0, 1), (0, -2, -1), (1, 1, 1), (0, -2, -1), (1, 0, 1), (-2, 0, -1), (0, 1, 1), (-1, -1, -1)]
>>> print(out.solution())
[(-2, 0, -1), (1, 0, 1), (-2, 0, -1), (1, 0, 1), (0, -2, -1), (1, 1, 1), (0, -2, -1), (1, 0, 1), (-2, 0, -1), (0, 1, 1), (-1, -1, -1)]
>>> print(ids.solution())
[(-2, 0, -1), (1, 0, 1), (-2, 0, -1), (1, 0, 1), (0, -2, -1), (1, 1, 1), (0, -2, -1), (1, 0, 1), (-2, 0, -1), (0, 1, 1), (-1, -1, -1)]
>>> rbfs = recursive_best_first_search(myboat, lambda node: node.depth)
>>> print(rbfs.solution())
[(-2, 0, -1), (1, 0, 1), (-2, 0, -1), (1, 0, 1), (0, -2, -1), (1, 1, 1), (0, -2, -1), (1, 0, 1), (-2, 0, -1), (0, 1, 1), (-1, -1, -1)]
>>> 


